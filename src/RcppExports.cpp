// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// nwestimator
double nwestimator(const double& inputval, const NumericVector& xvals, const NumericVector& yvals, const double& h);
RcppExport SEXP NOIS_nwestimator(SEXP inputvalSEXP, SEXP xvalsSEXP, SEXP yvalsSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type inputval(inputvalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type xvals(xvalsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type yvals(yvalsSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(nwestimator(inputval, xvals, yvals, h));
    return rcpp_result_gen;
END_RCPP
}
// nwvector
NumericVector nwvector(const NumericVector& x, const NumericVector& y, const double& h);
RcppExport SEXP NOIS_nwvector(SEXP xSEXP, SEXP ySEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(nwvector(x, y, h));
    return rcpp_result_gen;
END_RCPP
}
// LOOCV
double LOOCV(const NumericVector& x, const NumericVector& y, const double& h, const NumericVector& samp_quant);
RcppExport SEXP NOIS_LOOCV(SEXP xSEXP, SEXP ySEXP, SEXP hSEXP, SEXP samp_quantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type samp_quant(samp_quantSEXP);
    rcpp_result_gen = Rcpp::wrap(LOOCV(x, y, h, samp_quant));
    return rcpp_result_gen;
END_RCPP
}
// biasnwestimator
double biasnwestimator(const double& inputval, const NumericVector& xvals, const NumericVector& yvals, const double& h, const double& inputnw, const NumericVector& nwvals, bool shift_sq);
RcppExport SEXP NOIS_biasnwestimator(SEXP inputvalSEXP, SEXP xvalsSEXP, SEXP yvalsSEXP, SEXP hSEXP, SEXP inputnwSEXP, SEXP nwvalsSEXP, SEXP shift_sqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type inputval(inputvalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type xvals(xvalsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type yvals(yvalsSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type inputnw(inputnwSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nwvals(nwvalsSEXP);
    Rcpp::traits::input_parameter< bool >::type shift_sq(shift_sqSEXP);
    rcpp_result_gen = Rcpp::wrap(biasnwestimator(inputval, xvals, yvals, h, inputnw, nwvals, shift_sq));
    return rcpp_result_gen;
END_RCPP
}
// biasnwvector
NumericVector biasnwvector(const NumericVector& x, const NumericVector& y, const NumericVector& nwvals, const double& h);
RcppExport SEXP NOIS_biasnwvector(SEXP xSEXP, SEXP ySEXP, SEXP nwvalsSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nwvals(nwvalsSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(biasnwvector(x, y, nwvals, h));
    return rcpp_result_gen;
END_RCPP
}
// top_index
IntegerVector top_index(SEXP x, int n);
RcppExport SEXP NOIS_top_index(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(top_index(x, n));
    return rcpp_result_gen;
END_RCPP
}
// quantile_thresh
NumericVector quantile_thresh(NumericVector x, const int& thresh_val);
RcppExport SEXP NOIS_quantile_thresh(SEXP xSEXP, SEXP thresh_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type thresh_val(thresh_valSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_thresh(x, thresh_val));
    return rcpp_result_gen;
END_RCPP
}
// NOIS_loop
List NOIS_loop(const NumericVector& xx, const NumericVector& yy, const double& first_h, const double& local_q, const double& tol, const int& maxit);
RcppExport SEXP NOIS_NOIS_loop(SEXP xxSEXP, SEXP yySEXP, SEXP first_hSEXP, SEXP local_qSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type yy(yySEXP);
    Rcpp::traits::input_parameter< const double& >::type first_h(first_hSEXP);
    Rcpp::traits::input_parameter< const double& >::type local_q(local_qSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(NOIS_loop(xx, yy, first_h, local_q, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"NOIS_nwestimator", (DL_FUNC) &NOIS_nwestimator, 4},
    {"NOIS_nwvector", (DL_FUNC) &NOIS_nwvector, 3},
    {"NOIS_LOOCV", (DL_FUNC) &NOIS_LOOCV, 4},
    {"NOIS_biasnwestimator", (DL_FUNC) &NOIS_biasnwestimator, 7},
    {"NOIS_biasnwvector", (DL_FUNC) &NOIS_biasnwvector, 4},
    {"NOIS_top_index", (DL_FUNC) &NOIS_top_index, 2},
    {"NOIS_quantile_thresh", (DL_FUNC) &NOIS_quantile_thresh, 2},
    {"NOIS_NOIS_loop", (DL_FUNC) &NOIS_NOIS_loop, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_NOIS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
